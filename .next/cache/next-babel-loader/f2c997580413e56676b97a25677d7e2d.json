{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/Nenad/Web Development/avuteq/components/Count.js\";\nimport React, { useEffect, useState } from 'react'; //styling\n\nconst Count = props => {\n  // label of counter\n  // number to increment to\n  // duration of count in seconds\n  const {\n    label,\n    number,\n    duration\n  } = props.data; // number displayed by component\n\n  const {\n    0: count,\n    1: setCount\n  } = useState(\"0\");\n  useEffect(() => {\n    let start = 0; // first three numbers from props\n\n    const end = parseInt(number.substring(0, 3)); // if zero, return\n\n    if (start === end) return; // find duration per increment\n\n    let totalMilSecDur = parseInt(duration);\n    let incrementTime = totalMilSecDur / end * 1000; // timer increments start counter \n    // then updates count\n    // ends if start reaches end\n\n    let timer = setInterval(() => {\n      start += 1;\n      setCount(String(start) + number.substring(3));\n      if (start === end) clearInterval(timer);\n    }, incrementTime); // dependency array\n  }, [number, duration]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Count\",\n    children: /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: /*#__PURE__*/_jsxDEV(\"i\", {\n        children: [label, \": \", count]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n};\n\nexport default Count;","map":{"version":3,"sources":["/Users/Nenad/Web Development/avuteq/components/Count.js"],"names":["React","useEffect","useState","Count","props","label","number","duration","data","count","setCount","start","end","parseInt","substring","totalMilSecDur","incrementTime","timer","setInterval","String","clearInterval"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C,C,CAEA;;AAGA,MAAMC,KAAK,GAAGC,KAAK,IAAI;AACrB;AACA;AACA;AACA,QAAM;AAACC,IAAAA,KAAD;AAAQC,IAAAA,MAAR;AAAgBC,IAAAA;AAAhB,MAA6BH,KAAK,CAACI,IAAzC,CAJqB,CAMrB;;AACA,QAAM;AAAA,OAACC,KAAD;AAAA,OAAQC;AAAR,MAAoBR,QAAQ,CAAC,GAAD,CAAlC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIU,KAAK,GAAG,CAAZ,CADc,CAEd;;AACA,UAAMC,GAAG,GAAGC,QAAQ,CAACP,MAAM,CAACQ,SAAP,CAAiB,CAAjB,EAAmB,CAAnB,CAAD,CAApB,CAHc,CAId;;AACA,QAAIH,KAAK,KAAKC,GAAd,EAAmB,OALL,CAOd;;AACA,QAAIG,cAAc,GAAGF,QAAQ,CAACN,QAAD,CAA7B;AACA,QAAIS,aAAa,GAAID,cAAc,GAAGH,GAAlB,GAAyB,IAA7C,CATc,CAWd;AACA;AACA;;AACA,QAAIK,KAAK,GAAGC,WAAW,CAAC,MAAM;AAC5BP,MAAAA,KAAK,IAAI,CAAT;AACAD,MAAAA,QAAQ,CAACS,MAAM,CAACR,KAAD,CAAN,GAAgBL,MAAM,CAACQ,SAAP,CAAiB,CAAjB,CAAjB,CAAR;AACA,UAAIH,KAAK,KAAKC,GAAd,EAAmBQ,aAAa,CAACH,KAAD,CAAb;AACpB,KAJsB,EAIpBD,aAJoB,CAAvB,CAdc,CAoBd;AACD,GArBQ,EAqBN,CAACV,MAAD,EAASC,QAAT,CArBM,CAAT;AAuBA,sBACE;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA,2BACE;AAAA,6BACE;AAAA,mBAAIF,KAAJ,QAAaI,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAOD,CAvCD;;AAyCA,eAAeN,KAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\n\n//styling\n\n\nconst Count = props => {\n  // label of counter\n  // number to increment to\n  // duration of count in seconds\n  const {label, number, duration } = props.data\n\n  // number displayed by component\n  const [count, setCount] = useState(\"0\")\n\n  useEffect(() => {\n    let start = 0;\n    // first three numbers from props\n    const end = parseInt(number.substring(0,3))\n    // if zero, return\n    if (start === end) return;\n\n    // find duration per increment\n    let totalMilSecDur = parseInt(duration);\n    let incrementTime = (totalMilSecDur / end) * 1000;\n\n    // timer increments start counter \n    // then updates count\n    // ends if start reaches end\n    let timer = setInterval(() => {\n      start += 1;\n      setCount(String(start) + number.substring(3))\n      if (start === end) clearInterval(timer)       \n    }, incrementTime);\n\n    // dependency array\n  }, [number, duration]);\n\n  return (\n    <div className=\"Count\">\n      <h3>\n        <i>{label}: {count}</i>\n      </h3>\n    </div>\n  );\n}\n\nexport default Count;"]},"metadata":{},"sourceType":"module"}