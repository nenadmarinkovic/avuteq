{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/Nenad/Web Development/avuteq/components/Count.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { useState } from \"react\";\nimport CountUp from \"react-countup\";\nimport VisibilitySensor from \"react-visibility-sensor\";\n\nconst Count = (_ref) => {\n  let {\n    className\n  } = _ref,\n      rest = _objectWithoutProperties(_ref, [\"className\"]);\n\n  const {\n    0: viewPortEntered,\n    1: setViewPortEntered\n  } = useState(false);\n  return /*#__PURE__*/_jsxDEV(CountUp, _objectSpread(_objectSpread({}, rest), {}, {\n    start: viewPortEntered ? null : 1,\n    children: ({\n      countUpRef\n    }) => {\n      return /*#__PURE__*/_jsxDEV(VisibilitySensor, {\n        active: !viewPortEntered,\n        onChange: isVisible => {\n          if (isVisible) {\n            setViewPortEntered(true);\n          }\n        },\n        delayedCall: true,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: className,\n          ref: countUpRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 11\n      }, this);\n    }\n  }), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 5\n  }, this);\n};\n\nexport default Count;","map":{"version":3,"sources":["/Users/Nenad/Web Development/avuteq/components/Count.js"],"names":["React","useState","CountUp","VisibilitySensor","Count","className","rest","viewPortEntered","setViewPortEntered","countUpRef","isVisible"],"mappings":";;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,OAAP,MAAoB,eAApB;AACA,OAAOC,gBAAP,MAA6B,yBAA7B;;AAEA,MAAMC,KAAK,GAAG,UAA4B;AAAA,MAA3B;AAAEC,IAAAA;AAAF,GAA2B;AAAA,MAAXC,IAAW;;AACxC,QAAM;AAAA,OAACC,eAAD;AAAA,OAAkBC;AAAlB,MAAwCP,QAAQ,CAAC,KAAD,CAAtD;AAEA,sBACE,QAAC,OAAD,kCAAaK,IAAb;AAAmB,IAAA,KAAK,EAAEC,eAAe,GAAG,IAAH,GAAU,CAAnD;AAAA,cACG,CAAC;AAAEE,MAAAA;AAAF,KAAD,KAAoB;AACnB,0BACE,QAAC,gBAAD;AACE,QAAA,MAAM,EAAE,CAACF,eADX;AAEE,QAAA,QAAQ,EAAGG,SAAD,IAAe;AACvB,cAAIA,SAAJ,EAAe;AACbF,YAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACD;AACF,SANH;AAOE,QAAA,WAAW,MAPb;AAAA,+BASE;AAAK,UAAA,SAAS,EAAEH,SAAhB;AAA2B,UAAA,GAAG,EAAEI;AAAhC;AAAA;AAAA;AAAA;AAAA;AATF;AAAA;AAAA;AAAA;AAAA,cADF;AAaD;AAfH;AAAA;AAAA;AAAA;AAAA,UADF;AAmBD,CAtBD;;AAwBA,eAAeL,KAAf","sourcesContent":["import React, { useState } from \"react\";\nimport CountUp from \"react-countup\";\nimport VisibilitySensor from \"react-visibility-sensor\";\n\nconst Count = ({ className, ...rest }) => {\n  const [viewPortEntered, setViewPortEntered] = useState(false);\n\n  return (\n    <CountUp {...rest} start={viewPortEntered ? null : 1}>\n      {({ countUpRef }) => {\n        return (\n          <VisibilitySensor\n            active={!viewPortEntered}\n            onChange={(isVisible) => {\n              if (isVisible) {\n                setViewPortEntered(true);\n              }\n            }}\n            delayedCall\n          >\n            <div className={className} ref={countUpRef} />\n          </VisibilitySensor>\n        );\n      }}\n    </CountUp>\n  );\n};\n\nexport default Count;\n"]},"metadata":{},"sourceType":"module"}